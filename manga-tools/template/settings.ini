
[General]

# manga volumes range to process when operate [ firstVolume - lastVolume ]
# apply for Analyse, AutoCropper, GeneratePDF
# expected integers default is firstVolume = 1, lastVolume = 1
firstVolume = 
lastVolume =

# sub folder template name for each manga file ( default value will be "T%02d" )
subFolderFmt =

[Unpack]

# [0-1] ask to unpack all images of a single manga file to the same destination folder (without consideration of archive folders structure)
flatUnpack =

[Analyse]

# when running Analyse module
# will exclude images ( moved into analysed-img/excludes/ folder ) on following consideration
# empty or undefined key or value = -1 will disable the check about the key
# expected integers
excludeWidthLessThan     =
excludeWidthGreaterThan  =
excludeHeightLessThan    =
excludeHeightGreaterThan =

# when running Analyse module
# will split each double page image into two separate images
#
#  0     X1        X2      X3            X4   Width
#        |          |       |             |     
#  Y1 ------------------------------------------
#        |          |       |             |	
#        |          |       |             |	
#        |   left   |       |   right     |	
#        |   half   |       |   half      |	
#        |          |       |             |	
#        |          |       |             |	
#  Y2 ------------------------------------------
#        |          |       |             |	
#  Height 
splitDoublePageImage =1
splitIfRatioGreaterThan =
firstPageIsRightHalf =0
splitY1Ratio =
splitY2Ratio =
splitX1Ratio =
splitX2Ratio =
splitX3Ratio =
splitX4Ratio =

[AutoCropper]

# detection parameters
# % of pixels in the row/colum that will mean the start of the drawing area (the usefull area to keep)
# 0.25 = 25% (default=0.005 => 0.5%)
# expected floating point number
nonWhiteNbRatio =
nonBlackNbRatio =

# pixel will be considered non white if below this grey level (default=175)
# expected integer
nonWhiteLevel =

# pixel will be considere non black if greater than this grey level (default=80)
# expected integer
nonBlackLevel =

# [0-1] also try to crop black area margin (default=0)
alsoCropBlackArea =

# [0-1] just draw cropping the lines instead of cropping (default=0)
drawCroppingLine =

# ignore these pixels close to the borders as it could include some scan artifacts (default=0)
# if borderMarginToIgnore = 5 -> ignore the 5 pixels zone close to the border
# expected integer
borderMarginToIgnore =

# expected page numbers position (be wide)
#            left1         left2                 right1      right2   
#              v             v                     v            v
# up   ->
#                page number                         page number
# down ->

# original image width (in pixels) on which the measurement has been done
# expected integers
fullWidth         =
pageNumbersLeft1  =
pageNumbersLeft2  =
pageNumbersRight1 =
pageNumbersRight2 =

# original image height (in pixels) on which the measurement has been done
# expected integers
fullHeight       =
pageNumbersUp    =
pageNumbersDown  =

# dont crop automatically but move in tocheck/ folder ...
# if final width/height is less than this fraction of the original size ( default is : 0/100 and 0/100, that mean the check is disabled )
# expected a fractionnal eg : 1185/1677
toCheckCroppedFinalWidthRatio=
toCheckCroppedFinalHeightRatio=

[GeneratePDF]

# name of generated PDF document using volumeNo (default is Config.projetName + " T%02d.pdf")
# expected a string without quoto nor leading or trailing space
filenameFmt =
# title of document using volumeNo (default is Config.projetName + " No %d")
# expected a string without quoto nor leading or trailing space
titleFmt   =
# author (default is N/A)
# expected a string without quoto nor leading or trailing space 
author     =
